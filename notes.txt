Magesh Kuppan

Schedule:
    Session-1   : 90 mins
    Tea Break   : 20 mins
    Session-2   : 100 mins
    Lunch Break : 60 mins
    Session-3   : 90 mins
    Tea Break   : 20 mins
    Session-4   : 100 mins

Methodolgy:
    No powerpoints
    NOT for information sharing
    100% hands-on 
    At least 50% of the participants should have completed the assignments

Repository:
    https://github.com/tkmagesh/salesforce-go-sep-2022

Prerequisites:
    Go tools (https://go.dev/dl)
    Visual Studio Code (https://code.visualstudio.com)

Why Go?
    1. Close to hardware
         compilation to native code
         No portability (like Java)

    2. Simplicity
        Only 25 keywords
            - No access modifiers (public / projected / private)
            - No classes (only structs)
            - No inheritence (only compostion)
            - No execeptions (only errors)
            - No "try catch error"
            - No reference type (everything is a value)
            - No pointer arithmetic
            - No implicity type conversion

        package, import, func, var, if else, switch case, for, break, continue, go, type, struct, interface, chan, select case, range

    3. Concurrency Support
        Features in the Language
            go, range, select case, chan (data type), <- (channel operator)
        sync package
        sync/atomic package

To run a go program
    go run <program.go>

To create a build
    go build <program.go>

To customize the build name
    go build -o <binary_name> <program.go>

To list all the go environment variables
    go env

To get the value of environment variables
    go env <env_var_1> <env_var_2>

To create a build for a different platform (cross compilation)
    GOOS=<target_os> GOARCH=<target_arch> go build <program.go>

To change the environment variables
    go env -w GOOS=windows GOARCH=386


Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] imaginary [float32])
    complex128 (real [float64] imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32 ) (unicode code point)

Functions
    - variadic functions
    - anonymous functions
    - higher order functions (functions are first class objects)
        * functions can be assigned values to variables
        * functions can be passed as arguments
        * functions can be returned as return values

Collections
    - Array
        fixed size collection of data of the same type

    - Slice
        Varying size collection of data of the same type
        3 word object with a pointer to an array
        
    - Map